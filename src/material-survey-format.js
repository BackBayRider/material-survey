import t from "flow-runtime";
export const Validator = t.type("Validator", t.union(t.object(t.property("type", t.string("email")), t.property("text", t.string())), t.object(t.property("type", t.string("expression")), t.property("expression", t.string()), t.property("text", t.string())), t.object(t.property("type", t.string("numeric")), t.property("minValue", t.number(), true), t.property("maxValue", t.number(), true), t.property("text", t.string())), t.object(t.property("type", t.string("text")), t.property("minLength", t.number(), true), t.property("maxLength", t.number(), true), t.property("allowDigits", t.boolean(), true), t.property("text", t.string())), t.object(t.property("type", t.string("regex")), t.property("regex", t.string()), t.property("text", t.string())), t.object(t.property("type", t.string("answercount")), t.property("text", t.string()), t.property("minCount", t.number(), true), t.property("maxCount", t.number(), true))));
export const BaseQuestion = t.type("BaseQuestion", t.exactObject(t.property("name", t.string()), t.property("title", t.string()), t.property("isRequired", t.boolean(), true), t.property("hasOther", t.boolean(), true), t.property("description", t.string(), true), t.property("visibleIf", t.string(), true), t.property("defaultAnswer", t.any(), true), t.property("validators", t.array(Validator), true)));
export const QuestionChoice = t.type("QuestionChoice", t.union(t.object(t.property("value", t.string()), t.property("text", t.string())), t.string()));
export const TextQuestion = t.type("TextQuestion", t.object(...BaseQuestion.properties, t.property("type", t.union(t.string("text"), t.string("multiline-text")))));
export const USRegionQuestion = t.type("USRegionQuestion", t.object(...BaseQuestion.properties, t.property("type", t.union(t.string("us-region"), t.string("multiple-us-region"), t.string("us-state"), t.string("multiple-us-state")))));
export const RadioGroupQuestion = t.type("RadioGroupQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("radiogroup")), t.property("choices", t.array(QuestionChoice))));
export const CheckboxQuestion = t.type("CheckboxQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("checkbox")), t.property("choices", t.array(QuestionChoice))));
export const DropdownQuestion = t.type("DropdownQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("dropdown")), t.property("choices", t.array(QuestionChoice))));
export const MultipleDropdownQuestion = t.type("MultipleDropdownQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("multiple-dropdown")), t.property("choices", t.array(QuestionChoice))));
export const ImagePickerQuestion = t.type("ImagePickerQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("imagepicker")), t.property("choices", t.array(QuestionChoice))));
export const ChoiceRankerQuestion = t.type("ChoiceRankerQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("choiceranker")), t.property("choices", t.array(QuestionChoice)), t.property("choicesAtOnce", t.number()), t.property("trials", t.number())));
export const DynamicMatrixQuestion = t.type("DynamicMatrixQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("matrixdynamic")), t.property("choices", t.array(QuestionChoice)), t.property("columns", t.array(t.object(t.property("name", t.string()), t.property("title", t.string(), true), t.property("cellType", t.union(t.string("dropdown"), t.string("checkbox"), t.string("text"))), t.property("choices", t.array(QuestionChoice)), t.property("hasOther", t.boolean(), true))))));
export const BooleanQuestion = t.type("BooleanQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("boolean"))));
export const MatrixQuestion = t.type("MatrixQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("matrix")), t.property("columns", t.array(QuestionChoice)), t.property("rows", t.array(QuestionChoice))));
export const MatrixDropdownQuestion = t.type("MatrixDropdownQuestion", t.object(...BaseQuestion.properties, t.property("choices", t.array(QuestionChoice)), t.property("columns", t.array(t.tdz(() => Question, "Question"))), t.property("rows", t.array(QuestionChoice))));
export const RatingQuestion = t.type("RatingQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("rating")), t.property("rankings", t.number(), true), t.property("rateValues", t.array(QuestionChoice), true), t.property("minRateDescription", t.string(), true), t.property("midRateDescription", t.string(), true), t.property("maxRateDescription", t.string(), true)));
export const FileQuestion = t.type("FileQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("file")), t.property("maxSize", t.number(), true)));
export const SliderQuestion = t.type("SliderQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("slider")), t.property("min", t.number()), t.property("max", t.number()), t.property("step", t.number(), true)));
export const CommentQuestion = t.type("CommentQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("comment"))));
export const APIAutocompleteQuestion = t.type("APIAutocompleteQuestion", t.object(...BaseQuestion.properties, t.property("type", t.string("api-autocomplete")), t.property("requestUrl", t.string())));
export const Question = t.type("Question", t.union(RadioGroupQuestion, CheckboxQuestion, DropdownQuestion, ImagePickerQuestion, ChoiceRankerQuestion, BooleanQuestion, MatrixQuestion, MatrixDropdownQuestion, RatingQuestion, CommentQuestion));
export const Page = t.type("Page", t.object(t.property("elements", t.array(Question))));
export const SurveyMaterialFormat = t.type("SurveyMaterialFormat", t.object(t.property("expressionLanguage", t.string("surveyjs")), ...t.union(t.exactObject(t.property("questions", t.array(Question))), t.exactObject(t.property("pages", t.array(Page)))).properties));
export const AutocompleteRequestFunction = t.type("AutocompleteRequestFunction", t.function(t.param("url", t.string()), t.param("value", t.string()), t.return(t.array(t.object(t.property("value", t.string()), t.property("label", t.string()))))));
export default SurveyMaterialFormat;
